[gd_scene load_steps=28 format=2]

[ext_resource path="res://Lighting/Lighting.gd" type="Script" id=1]
[ext_resource path="res://Lighting/WallTorch.tscn" type="PackedScene" id=2]
[ext_resource path="res://Buildings/BrokenColumn.tscn" type="PackedScene" id=3]
[ext_resource path="res://Characters/Player/Player.tscn" type="PackedScene" id=4]
[ext_resource path="res://Lighting/Lighting.tscn" type="PackedScene" id=5]
[ext_resource path="res://Camera_Effects/Camera2D.tscn" type="PackedScene" id=6]
[ext_resource path="res://UI/UI.tscn" type="PackedScene" id=7]
[ext_resource path="res://Scenes/Map.gd" type="Script" id=8]
[ext_resource path="res://Prefabs/Magic/Pedestal.tscn" type="PackedScene" id=9]
[ext_resource path="res://PixelArt/Maps/Bosses/fire_boss_map_downwalls.png" type="Texture" id=10]
[ext_resource path="res://PixelArt/Maps/Bosses/fire_boss_map.png" type="Texture" id=11]
[ext_resource path="res://PixelArt/Buildings/Pedestals/fire_orb.png" type="Texture" id=12]
[ext_resource path="res://Characters/Bosses/FireBoss/FireBoss.tscn" type="PackedScene" id=13]
[ext_resource path="res://Overlap/FireFloor.tscn" type="PackedScene" id=14]
[ext_resource path="res://Buildings/Column.tscn" type="PackedScene" id=33]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 346.5, 8.75 )

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 11.375, 237.625 )

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 11.5, 237.625 )

[sub_resource type="RectangleShape2D" id=4]
extents = Vector2( 153.75, 7.5 )

[sub_resource type="RectangleShape2D" id=5]
extents = Vector2( 153.75, 7.75 )

[sub_resource type="RectangleShape2D" id=6]
extents = Vector2( 19, 299.5 )

[sub_resource type="RectangleShape2D" id=7]
extents = Vector2( 19, 299.5 )

[sub_resource type="RectangleShape2D" id=8]
extents = Vector2( 137, 16 )

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;
render_mode unshaded;

uniform mat4 global_transform;
uniform sampler2D light_data;
uniform int n_lights = 0;
uniform vec4 dark_color : hint_color = vec4(0.08, 0.08, 0.15, 1.0);
uniform vec4 default_light_color : hint_color;
uniform float light_level : hint_range(0.0, 1.0) = 1.0;
uniform float offset_modifier : hint_range(0.0, 8.0) = 1.0;
uniform int n_light_bands : hint_range(1, 13) = 7;
uniform bool will_smooth_shade = true;
uniform float band_decay_rate : hint_range(0.0, 1.0, 0.05) = 0.5;
uniform float light_strength_modifier : hint_range(0.0, 1.0) = 0.8;

varying vec2 world_position;

void vertex() {
	world_position = (global_transform * vec4(VERTEX, 0.0, 1.0)).xy;
}

void fragment() {
	// floor() the world_position so that it matches the native resolution
	vec2 frag_position = floor(world_position);
	float m_value = 0.0; // 0.0 == dark, 1.0 == light
	vec4 light_color = default_light_color;
	// Iterate through every light source.
	for(int i = 0; i < n_lights; i++) {
		// Get the data for this light source as passed in via texture
		vec4 texel = texelFetch(light_data, ivec2(i, 0), 0);
		
		// How far the light source extends
		float radius = texel.a;
		// How bright the light source is
		float strength = texel.b;
		// Distance from this pixel to the light source then normalize
		float dist = distance(texel.xy, frag_position);
		dist = min(dist / radius, 1.0);
		
		// offset so that light source doesn't fade immediately
		dist = max((dist * offset_modifier) - (offset_modifier - 1.0), 0.0);
		
		float value = 0.0;
		if(will_smooth_shade) {
			value = (1.0 - dist) * strength * light_strength_modifier;
		}
		else {
			// decay offset so that max value == 1.0
			float offset = pow(band_decay_rate, float(n_light_bands));
			for(int p = 0; p < n_light_bands; p++) {
				// Get max radius for this light band
				float radius_check = 1.0 - pow(band_decay_rate, float(p + 1)) + offset;
				// if pixel is less than the band's radius, then it's in the pth band
				if(dist < radius_check) {
					// Set it's value to the position of the band before this one
					value = (pow(band_decay_rate, float(p)) - offset)
							* strength * light_strength_modifier;
					// Nearest band was found, so break the loop
					break;
				}
			}
		}
		value = clamp(value, 0.0, 1.0);
		if(value > m_value) {
			m_value = value;
			light_color = texelFetch(light_data, ivec2(i, 1), 0);
		}
	}
	
	// mix darkness with light based on light level
	vec4 ambient_color = mix(dark_color, light_color, m_value);
	// apply global light level
	ambient_color.a *= 1.0 - light_level;
	// get screen color for this pixel
	vec4 screen_color = texture(SCREEN_TEXTURE, SCREEN_UV);
	
	// apply multiply blend mode
	COLOR = screen_color * ambient_color;
	
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/global_transform = null
shader_param/n_lights = 0
shader_param/dark_color = Color( 0.08, 0.08, 0.15, 1 )
shader_param/default_light_color = Color( 0, 0, 0, 1 )
shader_param/light_level = 1.0
shader_param/offset_modifier = 1.0
shader_param/n_light_bands = 7
shader_param/will_smooth_shade = true
shader_param/band_decay_rate = 0.5
shader_param/light_strength_modifier = 0.8

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;
render_mode unshaded;

uniform mat4 global_transform;
uniform sampler2D light_data;
uniform int n_lights = 0;
uniform vec4 dark_color : hint_color = vec4(0.08, 0.08, 0.15, 1.0);
uniform vec4 default_light_color : hint_color;
uniform float light_level : hint_range(0.0, 1.0) = 1.0;
uniform float offset_modifier : hint_range(0.0, 8.0) = 1.0;
uniform int n_light_bands : hint_range(1, 13) = 7;
uniform bool will_smooth_shade = true;
uniform float band_decay_rate : hint_range(0.0, 1.0, 0.05) = 0.5;
uniform float light_strength_modifier : hint_range(0.0, 1.0) = 0.8;

varying vec2 world_position;

void vertex() {
	world_position = (global_transform * vec4(VERTEX, 0.0, 1.0)).xy;
}

void fragment() {
	// floor() the world_position so that it matches the native resolution
	vec2 frag_position = floor(world_position);
	float m_value = 0.0; // 0.0 == dark, 1.0 == light
	vec4 light_color = default_light_color;
	// Iterate through every light source.
	for(int i = 0; i < n_lights; i++) {
		// Get the data for this light source as passed in via texture
		vec4 texel = texelFetch(light_data, ivec2(i, 0), 0);
		
		// How far the light source extends
		float radius = texel.a;
		// How bright the light source is
		float strength = texel.b;
		// Distance from this pixel to the light source then normalize
		float dist = distance(texel.xy, frag_position);
		dist = min(dist / radius, 1.0);
		
		// offset so that light source doesn't fade immediately
		dist = max((dist * offset_modifier) - (offset_modifier - 1.0), 0.0);
		
		float value = 0.0;
		if(will_smooth_shade) {
			value = (1.0 - dist) * strength * light_strength_modifier;
		}
		else {
			// decay offset so that max value == 1.0
			float offset = pow(band_decay_rate, float(n_light_bands));
			for(int p = 0; p < n_light_bands; p++) {
				// Get max radius for this light band
				float radius_check = 1.0 - pow(band_decay_rate, float(p + 1)) + offset;
				// if pixel is less than the band's radius, then it's in the pth band
				if(dist < radius_check) {
					// Set it's value to the position of the band before this one
					value = (pow(band_decay_rate, float(p)) - offset)
							* strength * light_strength_modifier;
					// Nearest band was found, so break the loop
					break;
				}
			}
		}
		value = clamp(value, 0.0, 1.0);
		if(value > m_value) {
			m_value = value;
			light_color = texelFetch(light_data, ivec2(i, 1), 0);
		}
	}
	
	// mix darkness with light based on light level
	vec4 ambient_color = mix(dark_color, light_color, m_value);
	// apply global light level
	ambient_color.a *= 1.0 - light_level;
	// get screen color for this pixel
	vec4 screen_color = texture(SCREEN_TEXTURE, SCREEN_UV);
	
	// apply multiply blend mode
	COLOR = screen_color * ambient_color;
	
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )
shader_param/global_transform = null
shader_param/n_lights = 0
shader_param/dark_color = Color( 0.08, 0.08, 0.15, 1 )
shader_param/default_light_color = Color( 0, 0, 0, 1 )
shader_param/light_level = 1.0
shader_param/offset_modifier = 1.0
shader_param/n_light_bands = 7
shader_param/will_smooth_shade = true
shader_param/band_decay_rate = 0.5
shader_param/light_strength_modifier = 0.8

[node name="FireElementRoom" type="Node2D"]
script = ExtResource( 8 )
map_name = "Fire Element Room"
map_path_name = "FireElementRoom"
map_type = 2
show_name = false
boss_fight = true

[node name="Camera2D" parent="." instance=ExtResource( 6 )]
position = Vector2( 157, 771 )

[node name="TopLeft" parent="Camera2D/Limits" index="0"]
position = Vector2( -385, -240 )

[node name="BottomRight" parent="Camera2D/Limits" index="1"]
position = Vector2( 690, 835 )

[node name="Tilesets" type="Node2D" parent="."]
pause_mode = 2

[node name="FireBossMap" type="Sprite" parent="Tilesets"]
position = Vector2( 152, 297 )
texture = ExtResource( 11 )

[node name="MapCollisions" type="Node2D" parent="Tilesets"]

[node name="Walls" type="StaticBody2D" parent="Tilesets/MapCollisions"]

[node name="Top" type="CollisionShape2D" parent="Tilesets/MapCollisions/Walls"]
position = Vector2( 153.5, -188.75 )
shape = SubResource( 1 )

[node name="Left" type="CollisionShape2D" parent="Tilesets/MapCollisions/Walls"]
position = Vector2( -172.375, 17.375 )
shape = SubResource( 2 )

[node name="Right" type="CollisionShape2D" parent="Tilesets/MapCollisions/Walls"]
position = Vector2( 483.5, 17.375 )
shape = SubResource( 3 )

[node name="BotL" type="CollisionShape2D" parent="Tilesets/MapCollisions/Walls"]
position = Vector2( -30.75, 244.5 )
shape = SubResource( 4 )

[node name="BotR" type="CollisionShape2D" parent="Tilesets/MapCollisions/Walls"]
position = Vector2( 342.5, 244.25 )
shape = SubResource( 5 )

[node name="Bridge" type="StaticBody2D" parent="Tilesets/MapCollisions"]

[node name="Left" type="CollisionShape2D" parent="Tilesets/MapCollisions/Bridge"]
position = Vector2( 59, 545.5 )
shape = SubResource( 6 )

[node name="Right" type="CollisionShape2D" parent="Tilesets/MapCollisions/Bridge"]
position = Vector2( 255, 545.5 )
shape = SubResource( 7 )

[node name="Bot" type="CollisionShape2D" parent="Tilesets/MapCollisions/Bridge"]
position = Vector2( 150, 845 )
shape = SubResource( 8 )

[node name="NPC_Paths" type="Node2D" parent="."]

[node name="World" type="YSort" parent="."]

[node name="FireBossMapDownwalls" type="Sprite" parent="World"]
position = Vector2( 152, 247 )
texture = ExtResource( 10 )
offset = Vector2( 0, 50 )

[node name="Bridges" type="YSort" parent="World"]

[node name="Checkpoints" type="YSort" parent="World"]

[node name="Houses" type="YSort" parent="World"]

[node name="HouseRoofs" type="YSort" parent="World/Houses"]

[node name="HouseFloors" type="YSort" parent="World/Houses"]

[node name="HouseDoors" type="YSort" parent="World/Houses"]

[node name="Entities" type="YSort" parent="World"]

[node name="Characters" type="YSort" parent="World/Entities"]

[node name="FireBoss" parent="World/Entities/Characters" instance=ExtResource( 13 )]
visible = false
position = Vector2( 156.824, -23.2094 )

[node name="Player" parent="World/Entities/Characters" instance=ExtResource( 4 )]
position = Vector2( 157, 771 )

[node name="RemoteTransform2D" type="RemoteTransform2D" parent="World/Entities/Characters/Player"]
remote_path = NodePath("../../../../../Camera2D")

[node name="ItemsDrop" type="YSort" parent="World"]
pause_mode = 2

[node name="Environment" type="YSort" parent="World"]
z_index = 1

[node name="Objects" type="YSort" parent="World"]

[node name="Column" parent="World/Objects" instance=ExtResource( 33 )]
position = Vector2( 100, 328 )

[node name="Column2" parent="World/Objects" instance=ExtResource( 33 )]
position = Vector2( 212, 328 )

[node name="Column3" parent="World/Objects" instance=ExtResource( 33 )]
position = Vector2( 212, 456 )

[node name="Column4" parent="World/Objects" instance=ExtResource( 33 )]
position = Vector2( 100, 456 )

[node name="Column5" parent="World/Objects" instance=ExtResource( 33 )]
position = Vector2( 100, 568 )

[node name="Column6" parent="World/Objects" instance=ExtResource( 33 )]
position = Vector2( 212, 680 )

[node name="Column7" parent="World/Objects" instance=ExtResource( 33 )]
position = Vector2( 212, 808 )

[node name="Column8" parent="World/Objects" instance=ExtResource( 33 )]
position = Vector2( 100, 808 )

[node name="BrokenColumn" parent="World/Objects" instance=ExtResource( 3 )]
position = Vector2( 212, 568 )

[node name="BrokenColumn2" parent="World/Objects" instance=ExtResource( 3 )]
position = Vector2( 100, 680 )

[node name="WallTorch" parent="World/Objects" instance=ExtResource( 2 )]
position = Vector2( 100, 328 )

[node name="WallTorch2" parent="World/Objects" instance=ExtResource( 2 )]
position = Vector2( 212, 328 )

[node name="WallTorch3" parent="World/Objects" instance=ExtResource( 2 )]
position = Vector2( 212, 456 )

[node name="WallTorch4" parent="World/Objects" instance=ExtResource( 2 )]
position = Vector2( 100, 456 )

[node name="WallTorch5" parent="World/Objects" instance=ExtResource( 2 )]
position = Vector2( 100, 568 )

[node name="WallTorch6" parent="World/Objects" instance=ExtResource( 2 )]
position = Vector2( 212, 680 )

[node name="WallTorch7" parent="World/Objects" instance=ExtResource( 2 )]
position = Vector2( 212, 808 )

[node name="WallTorch8" parent="World/Objects" instance=ExtResource( 2 )]
position = Vector2( 100, 808 )

[node name="Pedestal" parent="World/Objects" instance=ExtResource( 9 )]
position = Vector2( 155.669, -0.529732 )
orb_tex = ExtResource( 12 )
next_scene_path_name = "HomeTown"
player_next_scene_spawn_position = Vector2( 3900, 640 )

[node name="FireFloors" type="YSort" parent="World"]
position = Vector2( 0, -104 )

[node name="FireFloor" parent="World/FireFloors" instance=ExtResource( 14 )]
position = Vector2( -5.33939, -76.0859 )
num = 1

[node name="FireFloor2" parent="World/FireFloors" instance=ExtResource( 14 )]
position = Vector2( 316.357, -75.4185 )
num = 2

[node name="FireFloor3" parent="World/FireFloors" instance=ExtResource( 14 )]
position = Vector2( -6.00684, 134.819 )
num = 3

[node name="FireFloor4" parent="World/FireFloors" instance=ExtResource( 14 )]
position = Vector2( 316.357, 134.819 )
num = 4

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]
layer = 90
scroll_base_scale = Vector2( 1.1, 1.1 )

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
scale = Vector2( 1.1, 1.1 )

[node name="UI" parent="." instance=ExtResource( 7 )]

[node name="Lighting" parent="." instance=ExtResource( 5 )]

[node name="ColorRect" parent="Lighting" index="0"]
material = SubResource( 10 )

[node name="ColorRect" type="ColorRect" parent="Lighting"]
material = SubResource( 12 )
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}
camera_path = NodePath("../../Camera2D")

[editable path="Camera2D"]
[editable path="Lighting"]
